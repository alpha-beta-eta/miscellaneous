#lang racket
(provide (all-defined-out))
(define (set? lst)
  (cond ((null? lst) #t)
        ((memq (car lst) (cdr lst)) #f)
        (else (set? (cdr lst)))))
(define (subset? s1 s2)
  (cond ((null? s1) #t)
        ((memq (car s1) s2) (subset? (cdr s1) s2))
        (else #f)))
(define (set-equal? s1 s2)
  (and (subset? s1 s2)
       (subset? s2 s1)))
(define (U s1 s2)
  (cond ((null? s1) s2)
        ((memq (car s1) s2) (U (cdr s1) s2))
        (else (cons (car s1) (U (cdr s1) s2)))))
(define (I s1 s2)
  (cond ((null? s1) '())
        ((memq (car s1) s2)
         (cons (car s1) (I (cdr s1) s2)))
        (else (I (cdr s1) s2))))
(define (D s1 s2)
  (cond ((null? s1) '())
        ((memq (car s1) s2) (D (cdr s1) s2))
        (else (cons (car s1) (D (cdr s1) s2)))))