#lang racket
(define (make-vec x y)
  (vector 'vec x y))
(define (vec-x vec)
  (vector-ref vec 1))
(define (vec-y vec)
  (vector-ref vec 2))
(define (make-pt x y)
  (vector 'pt x y))
(define (pt-x pt)
  (vector-ref pt 1))
(define (pt-y pt)
  (vector-ref pt 2))
(define (make-frame o x y)
  (vector 'frame o x y))
(define (frame-o frame)
  (vector-ref frame 1))
(define (frame-x frame)
  (vector-ref frame 2))
(define (frame-y frame)
  (vector-ref frame 3))
(define (build-frame ox oy xx xy yx yy)
  (make-frame
   (make-pt ox oy)
   (make-vec xx xy)
   (make-vec yx yy)))
(define (vec+ v1 v2)
  (make-vec (+ (vec-x v1) (vec-x v2))
            (+ (vec-y v1) (vec-y v2))))
(define (vec* k v)
  (make-vec (* k (vec-x v))
            (* k (vec-y v))))
(define (pt+ p v)
  (make-pt (+ (pt-x p) (vec-x v))
           (+ (pt-y p) (vec-y v))))
(define (pt- p1 p2)
  (make-vec (- (pt-x p1) (pt-x p2))
            (- (pt-y p1) (pt-y p2))))
(define ((cmap f) p)
  (pt+ (frame-o f)
       (vec+ (vec* (pt-x p) (frame-x f))
             (vec* (pt-y p) (frame-y f)))))
(define (painterT f)
  (define o (frame-o f))
  (define x (frame-x f))
  (define y (frame-y f))
  (define ox (pt-x o))
  (define oy (pt-y o))
  (define xx (vec-x x))
  (define xy (vec-y x))
  (define yx (vec-x y))
  (define yy (vec-y y))
  (lambda (p)
    (lambda (f0)
      (define o0 (frame-o f0))
      (define x0 (frame-x f0))
      (define y0 (frame-y f0))
      (define (lc a b)
        (vec+ (vec* a x0)
              (vec* b y0)))
      (p (make-frame
          (pt+ o0 (lc ox oy))
          (lc xx xy)
          (lc yx yy))))))
(define (painterT* ox oy xx xy yx yy)
  (painterT (build-frame ox oy xx xy yx yy)))
(define ((over p1 p2) f)
  (p1 f) (p2 f))
(define mirror
  (painterT* 1 0 -1 0 0 1))
(define flip
  (painterT* 0 1 1 0 0 -1))
(define beside
  (let ((t1 (painterT* 0 0 1/2 0 0 1))
        (t2 (painterT* 1/2 0 1/2 0 0 1)))
    (lambda (p1 p2)
      (over (t1 p1) (t2 p2)))))
(define above
  (let ((t1 (painterT* 0 0 1 0 0 1/2))
        (t2 (painterT* 0 1/2 1 0 0 1/2)))
    (lambda (p1 p2)
      (over (t1 p1) (t2 p2)))))
(define (up p n)
  (if (= n 0)
      p
      (let ((q (up p (- n 1))))
        (above (beside q q) p))))
(define (right p n)
  (if (= n 0)
      p
      (let ((q (right p (- n 1))))
        (beside p (above q q)))))
(define (up-right p n)
  (if (= n 0)
      p
      (let ((u (up p (- n 1)))
            (r (right p (- n 1)))
            (ur (up-right p (- n 1))))
        (beside (above u p)
                (above ur r)))))
(define (four p)
  (define q (above p (flip p)))
  (beside (mirror q) q))
(define (sicp p n)
  (four (up-right p n)))
(define ((lerp t) p1 p2)
  (pt+ p1 (vec* t (pt- p2 p1))))
(define ((deCasteljau p*) t)
  (let iter ((p* p*))
    (if (null? (cdr p*))
        (car p*)
        (iter (map (lerp t)
                   (drop-right p* 1)
                   (cdr p*))))))
