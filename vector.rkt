#lang racket
(provide (all-defined-out))
(define (Sigma f a b)
  (if (> a b)
      0
      (+ (f a)
         (Sigma f (+ a 1) b))))
(define (vector-copy v)
  (define l (vector-length v))
  (define u (make-vector l))
  (let iter ((i 0))
    (if (= i l)
        u
        (begin
          (vector-set! u i (vector-ref v i))
          (iter (+ i 1))))))
(define (vector-swap! v i j)
  (define t (vector-ref v i))
  (vector-set! v i (vector-ref v j))
  (vector-set! v j t))
(define (build-vector l p)
  (define v (make-vector l))
  (let iter ((i 0))
    (if (= i l)
        v
        (begin
          (vector-set! v i (p i))
          (iter (+ i 1))))))
(define (iota n)
  (build-vector n identity))
(define (vector-append u v)
  (define l1 (vector-length u))
  (define l2 (vector-length v))
  (build-vector
   (+ l1 l2)
   (lambda (i)
     (if (< i l1)
         (vector-ref u i)
         (vector-ref v (- i l1))))))
(define (vector-map p v)
  (define l (vector-length v))
  (define u (make-vector l))
  (let iter ((i 0))
    (if (= i l)
        u
        (begin
          (vector-set! u i (p (vector-ref v i)))
          (iter (+ i 1))))))
(define (vector-mapi p v)
  (define l (vector-length v))
  (define u (make-vector l))
  (let iter ((i 0))
    (if (= i l)
        u
        (begin
          (vector-set! u i (p (vector-ref v i) i))
          (iter (+ i 1))))))
(define (vector-map! p v)
  (define l (vector-length v))
  (let iter ((i 0))
    (unless (= i l)
      (vector-set! v i (p (vector-ref v i)))
      (iter (+ i 1)))))
(define (vector-mapi! p v)
  (define l (vector-length v))
  (let iter ((i 0))
    (unless (= i l)
      (vector-set! v i (p (vector-ref v i) i))
      (iter (+ i 1)))))
(define (vector-for-each p v)
  (define l (vector-length v))
  (let iter ((i 0))
    (unless (= i l)
      (p (vector-ref v i))
      (iter (+ i 1)))))
(define (vector-add u v)
  (build-vector
   (vector-length u)
   (lambda (i)
     (+ (vector-ref u i)
        (vector-ref v i)))))
(define (vector-sub u v)
  (build-vector
   (vector-length u)
   (lambda (i)
     (- (vector-ref u i)
        (vector-ref v i)))))
(define (scalar-mul k v)
  (vector-map (lambda (x) (* k x)) v))
(define (scalar-mul! k v)
  (vector-map! (lambda (x) (* k x)) v))